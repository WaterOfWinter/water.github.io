<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微积分的旅程</title>
      <link href="/water.github.io/2024/10/17/%E5%BE%AE%E7%A7%AF%E5%88%86%E7%9A%84%E6%97%85%E7%A8%8B/"/>
      <url>/water.github.io/2024/10/17/%E5%BE%AE%E7%A7%AF%E5%88%86%E7%9A%84%E6%97%85%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 纯数学Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值分析的旅程</title>
      <link href="/water.github.io/2024/10/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%9A%84%E6%97%85%E7%A8%8B/"/>
      <url>/water.github.io/2024/10/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%9A%84%E6%97%85%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 应用数学Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学的旅程</title>
      <link href="/water.github.io/2024/10/14/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E6%97%85%E7%A8%8B/"/>
      <url>/water.github.io/2024/10/14/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E6%97%85%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="离散数学的旅程"><a href="#离散数学的旅程" class="headerlink" title="*离散数学的旅程"></a>*离散数学的旅程</h1><p>参考书籍：离散数学第六版（屈婉玲）</p><p>第一章</p>]]></content>
      
      
      
        <tags>
            
            <tag> 应用数学Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于学习CSAPP这档事</title>
      <link href="/water.github.io/2024/10/10/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0CSAPP%E8%BF%99%E6%A1%A3%E4%BA%8B/"/>
      <url>/water.github.io/2024/10/10/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0CSAPP%E8%BF%99%E6%A1%A3%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> source/images&#92;R-C (4).jpg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构的旅程</title>
      <link href="/water.github.io/2024/10/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E6%97%85%E7%A8%8B/"/>
      <url>/water.github.io/2024/10/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E6%97%85%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构的旅程"><a href="#数据结构的旅程" class="headerlink" title="*数据结构的旅程"></a>*数据结构的旅程</h1><h2 id="第一站-–-CS61B之旅"><a href="#第一站-–-CS61B之旅" class="headerlink" title="第一站 – CS61B之旅"></a>第一站 – CS61B之旅</h2><p>参考课程：CS61B</p><p>参考文档：Qiushao的CS61B笔记以及 CS61B自身文档</p><h3 id="Day-1-—-Lecture-1"><a href="#Day-1-—-Lecture-1" class="headerlink" title="Day 1 — Lecture 1"></a>Day 1 — Lecture 1</h3><p>Java是<strong>面对对象</strong>的语言.</p><h4 id="Java的运行"><a href="#Java的运行" class="headerlink" title="Java的运行"></a><strong>Java的运行</strong></h4><p>由编译器和解释器一同完成（如图下）。</p><p><img src="C:/Users/28603/Pictures/Screenshots/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-17%20160850.png" alt="屏幕截图 2024-10-17 160850"></p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><h3 id="Day-7-—-Lecture-7"><a href="#Day-7-—-Lecture-7" class="headerlink" title="Day 7 — Lecture 7"></a>Day 7 — Lecture 7</h3><h4 id="–Alist–"><a href="#–Alist–" class="headerlink" title="–Alist–"></a>–Alist–</h4><p>首先解释一下为什么要介绍Alist(也就是数组列表)，明明上节课的Dlist已经足够完美了，但我们在查找特定元素时，我们会发现Dlist无法直接一步到位，需要用到循环，但是如果是Alist的话，利用数组的特性就可以实现一步到位。啊哈，让我们从零开始建造Alist吧！！</p><h5 id="Array-数组"><a href="#Array-数组" class="headerlink" title="Array(数组)"></a>Array(数组)</h5><p>实例化数组的三种方法：</p><ul><li><p><code>int[] x = new int[n];</code> (<code>x[0] = 1;</code>…)       </p></li><li><p><code>int[] y = new int&#123;1, 2, 3, 4, 5&#125;;</code></p></li><li><p><code>int[] z = &#123;9, 10, 11, 12, 13&#125;;</code></p><p>此外，数组复制Java也有自带的函数arraycopy().</p><p><code>int[] b = &#123;9, 10, 11&#125;; System.arraycopy(b, 0, x, 3, 2);</code></p><p>其中，各参数为：</p><ul><li>The array to use as a source</li><li>Where to start in the source array</li><li>The array to use as a destination</li><li>Where to start in the destination array</li><li>How many items to copy</li></ul></li></ul><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AList</span> &#123;</span><br><span class="line">    <span class="comment">// size = 2</span></span><br><span class="line">    <span class="comment">// 5 6 0 8 0 0 0 0 0...</span></span><br><span class="line">    <span class="comment">// 0 1 2 3 4 5 6 7 8</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create empty List</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AList</span><span class="params">()</span> &#123;</span><br><span class="line">        items = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reSize</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[capacity];</span><br><span class="line">        System.arraycopy(items, <span class="number">0</span>, temp, <span class="number">0</span>, size);</span><br><span class="line">        items = temp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addList</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">            reSize(size * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        items[size] = x;</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> items[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> getLast();</span><br><span class="line">        size -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resize方法中你会发现容量是成倍增长的。因为如果每当添加一个数，容量加一。可想而知，所消耗的时间是多么长，效率十分低。如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-15%20203035.png" alt="屏幕截图 2024-10-15 203035"></p><p>虽然提高了效率，但当数组十分大的时候，再运用这个方法，就会有大量的空缺，造成大量的内存浪费。</p><p>上述代码仅适用于int类型，为了它更好地发挥它的作用，我们要用到我们的老朋友占位词。但是这里我们发现对数组直接使用占位词，你会发现有问题。这里我直接引用Qingsu关于这个问题的解决方案（如下图）。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-15%20204117.png" alt="屏幕截图 2024-10-15 204117"></p><hr><h3 id="Day-11-—-Lecture-11"><a href="#Day-11-—-Lecture-11" class="headerlink" title="Day 11 — Lecture 11"></a>Day 11 — Lecture 11</h3><h4 id="–Inheritance-IV-iterators–"><a href="#–Inheritance-IV-iterators–" class="headerlink" title="–Inheritance IV iterators–"></a>–<strong>Inheritance IV iterators</strong>–</h4><h4 id="Iterators-and-Iterables"><a href="#Iterators-and-Iterables" class="headerlink" title="Iterators and Iterables"></a>Iterators and Iterables</h4><p>在讲迭代器与可迭代对象之前，补充一下集合的简略代码(可以完成添加不重复的物品，以及查看集合是否包含这个元素)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraySet</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size; <span class="comment">// the next item to be added will be at position size</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArraySet</span><span class="params">()</span> &#123;</span><br><span class="line">        items = (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">100</span>]; <span class="comment">// we can abjust the size/resize, just like we did in the array list </span></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Adds an item to the set. (Ignores duplicates.) */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (contains(x)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        items[size] = x;</span><br><span class="line">        size += i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contain</span><span class="params">(T x)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (items[i].equal(x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>迭代器与可迭代对象</strong>。这部分内容实际上就是 python 中迭代器的概念加上上文提到的用 Java 实现比较器的手段</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-09%20191256.png" alt="屏幕截图 2024-10-09 191256"></p><p>我们可以从上面这张图发现新的遍历方法（java call this the enhanced for loop) ,我们将在揭开它的神秘面纱的过程中，了解迭代器与可迭代对象。</p><p>由于上面写了一个模拟集合的代码（不是java自带的），因此没有迭代器，所以如果使用enhanced loop,就会出现下面这种情况。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-09%20193351.png" alt="屏幕截图 2024-10-09 193351"></p><p>迭代器相当于一个小巫师，它会检查ArraySet,一步步地遍历ArraySet逐一返回项</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-09%20204929.png" alt="屏幕截图 2024-10-09 204929"></p><p>搞错了，再来！！</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-09%20204457.png" alt="屏幕截图 2024-10-09 204457"></p><p>相关的接口代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterable</span>&lt;T&gt; &#123;</span><br><span class="line">    Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    T <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此基础上我们实现了可迭代版本的 Arraysets，完整的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraySet</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size; <span class="comment">// the next item to be added will be at position size</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArraySet</span><span class="params">()</span> &#123;</span><br><span class="line">        items = (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns true if this map contains a mapping for the specified key.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(T x)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (items[i].equals(x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment">       Throws an IllegalArgumentException if the key is null. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;can&#x27;t add null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (contains(x)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        items[size] = x;</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns the number of key-value mappings in this map. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** returns an iterator (a.k.a. seer) into ME */</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArraySetIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ArraySetIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> wizPos;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ArraySetIterator</span><span class="params">()</span> &#123;</span><br><span class="line">            wizPos = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> wizPos &lt; size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">returnItem</span> <span class="operator">=</span> items[wizPos];</span><br><span class="line">            wizPos += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> returnItem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> <span class="title class_">ArraySet</span>&lt;&gt;();</span><br><span class="line">        aset.add(<span class="number">5</span>);</span><br><span class="line">        aset.add(<span class="number">23</span>);</span><br><span class="line">        aset.add(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//iteration</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : aset) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="–Object-methods–"><a href="#–Object-methods–" class="headerlink" title="–Object methods–"></a>–Object methods–</h4><p>如上文所述，Java 中所有的类都是 Object 类的子类，也可以说 Object 是最顶端的 superclass，继承的方法如下：</p><ul><li><code>String toString()</code></li><li><code>boolean equals(Object obj)</code></li><li><code>Class &lt;?&gt; getClass()</code></li><li><code>int hashCode()</code></li><li><code>protected Objectclone()</code></li><li><code>protected void finalize()</code></li><li><code>void notify()</code></li><li><code>void notifyAll()</code></li><li><code>void wait()</code></li><li><code>void wait(long timeout)</code></li><li><code>void wait(long timeout, int nanos)</code></li></ul><p>这里专注理解前两个即可</p><h5 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h5><p>相当于将某个对象字符串化的时候该怎么办？toString()解决的就是这个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;(&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (T i : <span class="built_in">this</span>) &#123;</span><br><span class="line">        x += i.toString() + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x += <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，在Java中，如果你试图将两个字符串加在一起，你实际上正在创建一个全新的字符串，打个比方，纸质书籍如果有错误或者需要加一些新内容，肯定要重新编辑，在印刷出来，这样一定会需要时间，实际上这与字符串不可变有关。</p><p>所以让我们来改进一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(); <span class="comment">// 借用Java自带的类</span></span><br><span class="line">    x.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (T i : <span class="built_in">this</span>) &#123;</span><br><span class="line">        x.append(i.toString());</span><br><span class="line">        x.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    x.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> x.toString(); <span class="comment">// 原本类型是StringBuilder,需要转换成String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这边还有一个问题，为什么”for(T i : this)”中用this,而不用items.</p><p>因为用items可能会有空值，而this刚刚好。</p><p><strong>this</strong></p><p>关于这个关键词，老面孔了，它有什么作用呢？</p><p>他会告诉你一个指向当前对象的引用。</p><p>与new关键词异曲同工，不过，他喊的不是新创建对象的地址，而是当前对象的地址。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-09%20212635.png" alt="屏幕截图 2024-10-09 212635"></p><p>但有时我们会发现，size与this.size似乎是等价的；</p><p>这是为什么呢？</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-09%20212914.png" alt="屏幕截图 2024-10-09 212914"></p><p>当变量有同名变量时，不可以互转，因为Java不知道哪个是哪个。</p><p>this 还可以代替构造方法名，实现构造方法的调用,但它只能在构造方法中调用，且只能在第一句,不能与 <code>super()</code> 一起使用，除非是通过 <code>super()</code> 先调用父类构造方法，然后通过其他构造方法继续调用当前类的构造方法（隐含顺序决定：<code>super()</code> 总是先调用）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;Unknown&quot;</span>, <span class="number">0</span>); <span class="comment">// 调用另一个构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;调用无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带一个参数的构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, <span class="number">0</span>); <span class="comment">// 调用带两个参数的构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;调用带一个参数的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带两个参数的构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用带两个参数的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();       <span class="comment">// 调用无参构造方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>); <span class="comment">// 调用带一个参数的构造方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">25</span>); <span class="comment">// 直接调用带两个参数的构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>给出等价使用new方法的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用new创建对象并获取其字段值</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">tempPerson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Unknown&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = tempPerson.name;</span><br><span class="line">        <span class="built_in">this</span>.age = tempPerson.age;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带一个参数的构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用new创建对象并获取其字段值</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">tempPerson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(name, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = tempPerson.name;</span><br><span class="line">        <span class="built_in">this</span>.age = tempPerson.age;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用带一个参数的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带两个参数的构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用带两个参数的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();       <span class="comment">// 调用无参构造方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>); <span class="comment">// 调用带一个参数的构造方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">25</span>); <span class="comment">// 直接调用带两个参数的构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h5><p>注意，Java 中 <code>==</code> 在比较对象的时候实际上比较的是<strong>二者是否是同一个对象</strong>，即二者存储的地址是否相同。而这显然不符合特定情况下我们的要求，所以我们采取 <code>equals</code> 来<strong>重载我们的 <code>=</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object <span class="number">0</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> ArraySet otherArraySet) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上图我们又发现了“instanceof”这个奇怪的关键词，它是在判断o是否时ArraySet的一个实例,同时，我们又注意到otherAccaySet,这又是什么鬼东西？原来，如果前面的判断为true，他会为你执行一个额外的操作，即它将创建一个名为otherArraySet的新变量，类型为ArraySet.换句话说，它和o是一样的，他们包含相同的引用。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-09%20214128.png" alt="屏幕截图 2024-10-09 214128"></p><p>话又说回来，如何判断两个数组大小相同呢？</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-09%20214337.png" alt="屏幕截图 2024-10-09 214337"></p><p>大小相同，并且有互相的东西–“你有，我也有”</p><p><img src="C:/Users/28603/Pictures/Screenshots/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-09%20214543.png" alt="屏幕截图 2024-10-09 214543"></p><h5 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h5><p>异常会导致正常的控制流停止。实际上，我们可以选择抛出自己的异常。在 Python 中，您可能已经看到过这种情况，使用 <code>raise</code> 关键字。在 Java 中，异常是对象，我们使用以下格式抛出异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExceptionObject</span>(parameter1, ...)</span><br></pre></td></tr></table></figure><p>一个典型例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* Associates the specified value with the specified key in this map.</span><br><span class="line">   Throws an IllegalArgumentException if the key is null. */</span><br><span class="line">public void add(T x) &#123;</span><br><span class="line">    if (x == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;can&#x27;t add null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (contains(x)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    items[size] = x;</span><br><span class="line">    size += 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么这么做？以下是课本原文：</p><p>We get an Exception either way - why is this better?</p><ol><li>We have control of our code: we consciously decide at what point to stop the flow of our program</li><li>More useful Exception type and helpful error message for those using our code</li></ol><p>However, it would be better if the program doesn’t crash at all. There are different things we could do in this case. Here are some below:</p><p><strong>Approach 1</strong>: Don’t add <code>null</code> to the array if it is passed into <code>add</code></p><p><strong>Approach 2</strong>: Change the <code>contains</code> method to account for the case if <code>items[i] == null</code>.</p><p>Whatever you decide, it is important that users know what to expect. That is why documentation (such as comments about your methods) is very important</p><h3 id="Day-12-—-Lecture-12"><a href="#Day-12-—-Lecture-12" class="headerlink" title="Day 12 — Lecture 12"></a>Day 12 — Lecture 12</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Computer计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数的旅程</title>
      <link href="/water.github.io/2024/10/08/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%97%85%E7%A8%8B/"/>
      <url>/water.github.io/2024/10/08/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%97%85%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="线性代数的旅途"><a href="#线性代数的旅途" class="headerlink" title="*线性代数的旅途"></a>*线性代数的旅途</h1><h2 id="旅途的第一站（章）-–-线性代数的本质"><a href="#旅途的第一站（章）-–-线性代数的本质" class="headerlink" title="旅途的第一站（章） – 线性代数的本质"></a>旅途的第一站（章） – 线性代数的本质</h2><p>哔哩哔哩上《线性代数的本质》的一些笔记</p><p>原视频链接：<a href="https://www.bilibili.com/video/BV1ys411472E?p=2&vd_source=52cc25d7b185f522bb256efa0f7cca48">01 - 向量究竟是什么？_哔哩哔哩_bilibili</a></p><p>“BV1ys411472E”</p><h3 id="第一节-—-向量究竟是什么？"><a href="#第一节-—-向量究竟是什么？" class="headerlink" title="第一节 — 向量究竟是什么？"></a>第一节 — 向量究竟是什么？</h3><p>从物理的角度来看，向量是空间里的箭头，决定一个向量的是它的长度和它所指的方向</p><p>从计算机的角度来看，向量是有序的数字列表，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-08%20182113.png" alt="屏幕截图 2024-10-08 182113"></p><p>物理的角度与计算机的区别在于：</p><p>物理方面注重空间上的描述</p><p>计算机方面注重数据的有序</p><p>而数学需要去概括且结合这两种观点：向量可以是任何东西，只要保证两个向量相加以及向量相乘是有意义的即可。（向量加法与向量乘法贯彻线性代数始终，十分重要）</p><p>几何方面（对应物理角度）：考虑一个箭头落在某个坐标系中，并且箭头起点位于原点，与物理角度不同，物理箭头起点可以落在空间任何位置</p><p>代数方面（对应计算机方面）：用以下方式来表示向量（下图所示）</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-08%20184207.png" alt="屏幕截图 2024-10-08 184207"></p><p>且向量与坐标以如下形式区分开</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-08%20184325.png" alt="屏幕截图 2024-10-08 184325"></p><p>向量加法 –&gt; 首尾相加，不做过多描述，图解如下：</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-08%20184806.png" alt="屏幕截图 2024-10-08 184806"></p><p>向量相乘 –&gt; 向量的缩放，缩放的系数称为标量，图解如下：</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-08%20184943.png" alt="屏幕截图 2024-10-08 184943"></p><h3 id="第二节-—-线性组合-张成的空间-基"><a href="#第二节-—-线性组合-张成的空间-基" class="headerlink" title="第二节 — 线性组合&amp;&amp;张成的空间&amp;&amp;基"></a>第二节 — 线性组合&amp;&amp;张成的空间&amp;&amp;基</h3><p>怎么用有限的向量来表示无限的空间呢？（以下那二维空间举例 –&gt; x-y）</p><p>在了解了向量加法与向量数乘，我们可以发现不重合的两个向量似乎可以做到！</p><p>这两个特殊的向量被称为坐标系的基（basis of a coordinste system）</p><p>在x-y坐标系上最特殊的莫过于（1，0）与（0， 1）了。</p><p>两个数乘向量的和被称为这两个向量的线性组合。</p><p>线性这个词哪里来？有一个不是它的根源的说法 – 固定其中一个标量，让其中一个标量自由变化，所产生的向量终点会描出一条直线。</p><p>如果你让两个标量同时自由变化，考虑所有可能得到的向量，有3种情况：</p><p>1&gt; 当两个向量不重合或不在一条直线上，线性组合可以到达平面中的任意一点‘</p><p>2&gt; 倘若恰好在一条直线上，所产生的终点被限制在一条过原点的直线上</p><p>3&gt;更极端的情况，两个向量都是零向量，那无论如何线性组合，最终的结果都只会在原点</p><p><img src="C:/Users/28603/Pictures/Screenshots/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-09%20221517.png" alt="屏幕截图 2024-10-09 221517"></p><p>所有可以表示为给定向量线性组合的向量的集合，被称为<strong>给定向量张成的空间</strong>（the span of those two vectors)</p><p>当空间向量多到看不清时，可以仅仅保留终点。</p><p><img src="C:/Users/28603/Pictures/Screenshots/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-09%20222059.png" alt="屏幕截图 2024-10-09 222059"></p><p>当有一个向量对张成空间没有贡献，我们称为“线性相关”。</p><p>若没有，我们称为“线性无关”。</p><h3 id="第三节-—-矩阵与线性变换（Linear-transformations）"><a href="#第三节-—-矩阵与线性变换（Linear-transformations）" class="headerlink" title="第三节 — 矩阵与线性变换（Linear transformations）"></a>第三节 — 矩阵与线性变换（Linear transformations）</h3><p>重点：线性变换的概念以及它和矩阵的关系</p><p>本节如标题所示，会以线性变换为中心进行讨论， 主要包括：这些变换在二维空间中长什么样，以及它们如何与矩阵向量乘法相关联。</p><p>“变换”实际上是函数的一种花哨的说法。那为什么不直接使用函数这个名称，叫线性函数呢？</p><p>后面我们将在接下来的操作下的过程中体会这个词的“可视化”。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-11%20181331.png" alt="屏幕截图 2024-10-11 181331"></p><p>用图将整个坐标系进行变换，直接用向量箭头画面会显得很杂乱，所以我们用上一节的思想—只保留向量的终点。</p><p>那线性又是什么意思，一个变换具有以下两个性质：</p><p>1&gt; 直线在变换后还是直线</p><p>2&gt; 原点位置不变</p><p>话句话说：保持网格状平行且等距分布。</p><p>怎么知道变换后的向量？</p><p>只需抓住张成这个空间的基即可，变换不会改变前后的线性组合</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-11%20182558.png" alt="屏幕截图 2024-10-11 182558"></p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-11%20182643.png" alt="屏幕截图 2024-10-11 182643"></p><p>或者逆时针旋转90度</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-11%20182736.png" alt="屏幕截图 2024-10-11 182736"></p><p>有一个特殊的变换叫作“剪切”，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-11%20183012.png" alt="屏幕截图 2024-10-11 183012"></p><p>如果变化后的基是线性相关的，那么称作“列（向量）线性相关” </p><h3 id="第四节-—-矩阵乘法与线性变换复合"><a href="#第四节-—-矩阵乘法与线性变换复合" class="headerlink" title="第四节 — 矩阵乘法与线性变换复合"></a>第四节 — 矩阵乘法与线性变换复合</h3><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-14%20203356.png" alt="屏幕截图 2024-10-14 203356"></p><p>线性变换可以叠加，可以先旋转后剪切，称为<strong>复合变换</strong></p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-14%20203823.png" alt="屏幕截图 2024-10-14 203823"></p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-14%20204158.png" alt="屏幕截图 2024-10-14 204158"></p><p>M2可以看作坐标系先逆时针旋转，在左右翻转。（给2乘上-1，再乘回来的过程，当向量旋转大于180度，就可以乘上-1来拆分过程）</p><p>M1与M2相结合的过程，可以先完成M1，再完成M2（M2作用对象是最原本的x-y坐标系，可以将基在经过M1的作用后看作原本x-y中的普通向量，在跟随新x-y一起旋转），就像过年那个吃年夜饭的旋转圆盘，假设有两个，你先转最上面一个，再旋转第二个，或者地球，太阳以及黑洞（银河系中心），地球在围绕太阳转的同时，也跟随太阳围绕银河系中心转，更多Mi,只是参考系的叠加罢了。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-14%20205816.png" alt="屏幕截图 2024-10-14 205816"></p><p>变换后的基如上图的(e,g)和(f,h),作为普通向量分别经过M2的洗礼罢了。</p><p>那M1 M2 ?&#x3D; M2 M1呢？ </p><p>答案是不等于。</p><p>那么（A B）C ?&#x3D; A (B C)呢？</p><p>答案是相等。</p><p>为什么呢</p><p>前者好比本来是先穿袜子再穿鞋，不能先穿鞋子在穿袜子。（M1和M2始终都是对（1，0）和（0，1）做变换，不是直接对变换后的基做变换，所以顺序不能改变）。</p><p>后者好比是先拿鞋在穿袜子最后穿鞋，括号不影响先后顺序。</p><p>由此可见，线性变换有结合律，但没有交换律。</p><h3 id="第五节-—-行列式"><a href="#第五节-—-行列式" class="headerlink" title="第五节 — 行列式"></a>第五节 — 行列式</h3><p>你知道怎么计算行列式吗，你知道结果代表什么吗？</p><p>让我们通过这节课，探索其中的奥妙吧！！</p><p>你可能发现线性变换对空间或多或少会有拉伸挤压，但我们不知道具体拉伸(挤压)了多少，那么是否可以量化这个拉伸或挤压程度呢？行列式的概念横空出世，来解决这个问题！！</p><p>怎么比较前后变化了多少呢？总要有一个参照物吧。所以我们以基所组成的有规律的图形来定义。不同维度图形不同，二维就是一个平行四边形的面积，三维就是体积…（1x1，1x1x1…）</p><p>有一个特例，就是行列式为零的时候，他代表空间被压缩到更小的维度上。</p><p>当然，你有时候会发现行列式的值为负，这代表将空间翻转了（这与前面判断线性变换是否使坐标系左右翻转有关）,当然这是二维的情况，三维需要用右手定则（视频更加直观）</p><p>至于行列式为负的情况，是很自然的，当基重合时（行列式为零），继续运动下去，为零不是很正常的吗？</p><p>给出行列式的公式以及图解：</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-15%20191415.png" alt="屏幕截图 2024-10-15 191415"></p><h3 id="第六节-—-逆矩阵-列空间-零空间"><a href="#第六节-—-逆矩阵-列空间-零空间" class="headerlink" title="第六节 — 逆矩阵&amp;&amp;列空间&amp;&amp;零空间"></a>第六节 — 逆矩阵&amp;&amp;列空间&amp;&amp;零空间</h3><p>线性代数的应用很广泛，在于它能帮助我们求解特定的方程组。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-15%20191952.png" alt="屏幕截图 2024-10-15 191952"></p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-15%20192048.png" alt="屏幕截图 2024-10-15 192048"><br>$$<br>A x &#x3D;v<br>$$<br>通常大多数向量我们用了线性变换，可以通过逆向操作获得原来的向量。我们称这个逆向操作为A的逆.</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-15%20192842.png" alt="屏幕截图 2024-10-15 192842"></p><p>这个变换被称为“恒等变换”。</p><p>我们可以利用这个行质求解向量方程。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-15%20192952.png" alt="屏幕截图 2024-10-15 192952"></p><p>刚才所说的情况适用于大多数线性变换，对于变换降低了维度，也就是行列式为零的情况不适用，这种情况A没有逆（因为维度降低了，是无法靠线性变换回去的），拿二维举例，二维压缩成一条线，你不能指望解压缩一条线获得二维空间的所有向量。这样会要求已经重合唯一的向量变换为无数向量，也就是映射多个向量，但线性变换在前面说过，相当于函数，只能将一个输入变换为一个输出，所以这是不现实的。（行列式为零不代表没有解）。</p><p>为了表示线性变换的结果，专门有一个术语来表示线性变换后的维度—–“<strong>秩</strong>”</p><p>对于一个空间中的所有向量经过线性变换输出的集合称为“<strong>列空间</strong>”（<strong>Colum space</strong> 0f “A”）</p><p>”列“的含义，线性变换（矩阵的列）告诉我们基向量变换后的位置。</p><p>如前面所说，这些变换后的基向量张成的空间就是所有可能的变换结果。</p><p>换句话说，列空间就是矩阵的列所张成的空间。</p><p>秩的一个定义就是列空间的维数。</p><p>当秩与列数相等，称为”<strong>满秩</strong>“</p><p>零向量必然在列空间中，这是因为线性变换的特性（原点不动）。</p><p>对于非满秩矩阵来说，会有一堆向量在变换后成为零向量。这些变换后落在远点的向量的集合被称为<strong>零空间（Null space）或核（Kernel）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-15%20195937.png" alt="屏幕截图 2024-10-15 195937"></p><h3 id="第七节-—-点积与对偶性"><a href="#第七节-—-点积与对偶性" class="headerlink" title="第七节 — 点积与对偶性"></a>第七节 — 点积与对偶性</h3><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20142503.png" alt="屏幕截图 2024-10-16 142503"></p><p>点积，两个维数相同的向量坐标一一对应相乘相加。代数上就是这样。</p><p>现在我们来看它的几何解释（如下图）：</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20142835.png" alt="屏幕截图 2024-10-16 142835"></p><p>这是结果为正的情况，再来看结果为负的情况。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20142920.png" alt="屏幕截图 2024-10-16 142920"></p><p>上述的表达式还可以表示成v的投影长度乘以w的长度，没错，点积与顺序无关。下面我们来证明为什么与顺序无关。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20143434.png" alt="屏幕截图 2024-10-16 143434"></p><p>这显然与对称无关，我们现在破坏这个对称性。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20143650.png" alt="屏幕截图 2024-10-16 143650"></p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20143711.png" alt="屏幕截图 2024-10-16 143711"></p><p>话又说回来，为什么点积与投影有关？——<strong>“对偶性</strong>”</p><p>不过在讨论这个之前，先要了解多维空间到一维空间（数轴）的线性变换，</p><p><img src="C:/Users/28603/Pictures/Screenshots/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20191738.png" alt="屏幕截图 2024-10-16 191738"></p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20191752.png" alt="屏幕截图 2024-10-16 191752"></p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20191856.png" alt="屏幕截图 2024-10-16 191856"></p><p>如果这些点没有等距分布，那么这个变换就不是线性的。这些线性变换完全由他对基的变换决定。但是这一次，这些基向量只落在一个数上，所以当我们将他们变换的位置记录为矩阵的列时，矩阵的每列只是一个单独的数。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20192444.png" alt="屏幕截图 2024-10-16 192444"></p><p>接下来，我们用一个例子来了解它对向量的含义。</p><p>假如有一个线性变换，他将基(i,j)分别变换为1和-2，要跟踪一个向量，视频中举了（4，3），当在计算向量变换后的结果，从数值角度进行计算时，他就是矩阵向量乘法。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20193208.png" alt="屏幕截图 2024-10-16 193208"></p><p>这变换矩阵不像一个躺下的向量吗？你想在可以将矩阵立直，从而得到与之相关的向量，或者将向量放倒，从而得到与之相关的矩阵。</p><p>这种联系在几何上是什么意思？让我们来看一个例子，我们将一个数轴经过原点斜放在空间中。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20193906.png" alt="屏幕截图 2024-10-16 193906"></p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20193936.png" alt="屏幕截图 2024-10-16 193936"></p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20194042.png" alt="屏幕截图 2024-10-16 194042"></p><p>实际上我们定义了一个从二维向量到数的一个函数，重要的是这个函数是线性的，实线上等距分布的店在投影在数轴上仍然等距分布，</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20194447.png" alt="屏幕截图 2024-10-16 194447"></p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20194552.png"></p><p>怎么获得一个变换矩阵使二维向量转换为一个数呢？我们应该抓住数轴上的向量反推，因为这些向量既在数轴上，又在二维空间中，它对数轴的投影就是它的模（向量长度），为了方便，我们用单位向量u来举例，用之前对称轴的方法来计算基底会落在数组的那个位置，以基底i为例，i变换落在数轴上的位置等于u的横向量，同理，j变换的位置等于u的纵向量。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20200014.png" alt="屏幕截图 2024-10-16 200014"></p><p>这样我们就可以使任意函数都落在数轴上了。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20200602.png" alt="屏幕截图 2024-10-16 200602"></p><p>这也是为什么将点积理解为将向量投影到单位向量所在的直线上所得到的投影长度</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20200914.png" alt="屏幕截图 2024-10-16 200914"></p><p>非单位向量也同理。非单位向量无非是将单位向量放大或缩小了，相对应的基也跟着变化就可以了，之前单位向量投影所得到的值也要乘以相应的倍数。</p><p>当你看到一个空间经过线性变换输出的结果为一维数组，就要想到它与空间中的唯一向量与之相关。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20202140.png"></p><p>总结，表面上看，点积是理解投影的有利几何工具，并且方便检验两个向量的指向是否相同，更进一步，两个向量点乘，就是将其中的一个向量转换为线性变换。</p><h3 id="第八节-—-叉积的标准介绍"><a href="#第八节-—-叉积的标准介绍" class="headerlink" title="第八节 — 叉积的标准介绍"></a>第八节 — 叉积的标准介绍</h3><p>假设平面分别有两个向量围成一个平面四边形</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-17%20142213.png" alt="屏幕截图 2024-10-17 142213"></p><p>并且v在w的右边，值为正，反之为负。</p><p>如何记住正负呢？基向量的顺序就是定向的基础。（涉及翻转，x在y右边，没翻转）</p><p>可以通过行列式计算面积（值的正负正是前面讨论过的翻转的问题），</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-17%20142814.png" alt="屏幕截图 2024-10-17 142814"></p><p>为什么可以这样做呢？这是因为以这两个向量为列的行列式作为变换矩阵将基转换为这两个向量，所计算的面积与我们要求的面积在数值上相同。</p><p>v与w位置关系是垂直或接近于垂直，与他们指向接近时叉积更大。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-17%20143938.png" alt="屏幕截图 2024-10-17 143938"></p><p>从中也可以发现行列式的性质。</p><p>但以上讨论的还不是叉积，真正的叉积是通过两个三维向量生成一个新的三维向量。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-17%20144249.png" alt="屏幕截图 2024-10-17 144249"></p><p>判断生成的向量用右手定则；</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-17%20144406.png" alt="屏幕截图 2024-10-17 144406"></p><p>计算该向量的公式如下：</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-17%20144513.png" alt="屏幕截图 2024-10-17 144513"></p><p>当这公式怎么来的？先给一张图，具体过程的之后再详细讨论。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-17%20144908.png" alt="屏幕截图 2024-10-17 144908"></p><h3 id="第九节-—-以线性变换的眼光看叉积"><a href="#第九节-—-以线性变换的眼光看叉积" class="headerlink" title="第九节 — 以线性变换的眼光看叉积"></a>第九节 — 以线性变换的眼光看叉积</h3><h3 id="第十节-—-基变换"><a href="#第十节-—-基变换" class="headerlink" title="第十节 — 基变换"></a>第十节 — 基变换</h3><h3 id="第十一节-—-特征向量与特征值"><a href="#第十一节-—-特征向量与特征值" class="headerlink" title="第十一节 — 特征向量与特征值"></a>第十一节 — 特征向量与特征值</h3><h3 id="第十二节-—-抽象向量空间"><a href="#第十二节-—-抽象向量空间" class="headerlink" title="第十二节 — 抽象向量空间"></a>第十二节 — 抽象向量空间</h3><h3 id="第十三节-—-克莱姆法则与集合解释"><a href="#第十三节-—-克莱姆法则与集合解释" class="headerlink" title="第十三节 — 克莱姆法则与集合解释"></a>第十三节 — 克莱姆法则与集合解释</h3><h2 id="旅途的第二站（章）–-深入了解线性代数"><a href="#旅途的第二站（章）–-深入了解线性代数" class="headerlink" title="旅途的第二站（章）– 深入了解线性代数"></a>旅途的第二站（章）– 深入了解线性代数</h2><p><strong>参考视频：麻省理工学院 - MIT - 线性代数</strong></p><p><strong>参考书籍：Introduction to Linear Algebra(William Gilbert Strang)</strong></p><h2 id="旅途的第三站（章）–-线性代数的进阶（高等代数）"><a href="#旅途的第三站（章）–-线性代数的进阶（高等代数）" class="headerlink" title="旅途的第三站（章）– 线性代数的进阶（高等代数）"></a>旅途的第三站（章）– 线性代数的进阶（高等代数）</h2><p><strong>参考视频：高等代数———丘维生</strong></p><p><strong>参考书籍：丘维生的两本白皮书</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 纯数学Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50--梦开始的地方</title>
      <link href="/water.github.io/2024/10/07/CS50-%E6%A2%A6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
      <url>/water.github.io/2024/10/07/CS50-%E6%A2%A6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="CS50-梦开始的地方"><a href="#CS50-梦开始的地方" class="headerlink" title="CS50-梦开始的地方"></a>CS50-梦开始的地方</h1><h2 id="Lecture4-–-memory"><a href="#Lecture4-–-memory" class="headerlink" title="Lecture4 – memory"></a>Lecture4 – memory</h2><p>众所周知，图像由像素组成，但在我们能在编写能够操作这类图像代码之前，我们需要新的语法来导航文件。</p><p>如何储存像图像一样的信息呢？</p><p>![10屏幕截图 2024-10-07 210107.png](<a href="https://github.com/WaterOfWinter/markdown_pic/blob/main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE">https://github.com/WaterOfWinter/markdown_pic/blob/main/2024/10屏幕截图</a> 2024-10-07 210107.png?raw&#x3D;true)</p><h2 id="Lecture-5-–-Data-Structures"><a href="#Lecture-5-–-Data-Structures" class="headerlink" title="Lecture 5 – Data Structures"></a>Lecture 5 – Data Structures</h2><h3 id="抽象数据类型（Abstract-Data-Types）"><a href="#抽象数据类型（Abstract-Data-Types）" class="headerlink" title="抽象数据类型（Abstract Data Types）"></a>抽象数据类型（Abstract Data Types）</h3><p><strong>抽象数据类型：</strong>可以用多种方式来实现一种。</p><p><strong>queues(队列)</strong></p><p>队列的一个特性是先到先得（First in, First out）,就像视频中三个人排队拿饼干一样。</p><p>这样的结构提供了特定的操作：</p><p>enqueueing (入列)</p><p>dequeueing (出列)</p><p>如何在代码中实现一个队列呢？我们可以借助数组，正如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20123214.png" alt="屏幕截图 2024-10-13 123214"></p><p>但这里有一个问题，这串代码从一开始就规定了这个结构的总容量，如果定义了总容量为50，实际却只有三个人，那不是太浪费空间。</p><p>所以，我们需要另一种数据来在队列内部进行跟踪</p><p>计算机还有其他形式可以在内存中存储数据，还有一种被称为栈的抽象数据结构</p><p><strong>Stack(栈)</strong></p><p>栈和队列不同的是，栈的特性是后进先出（LIFO）</p><p>这个特性在日常生活经常用到，比如邮箱，总是最新的信息在最上面，使我们最先处理</p><p>栈也有两个特性：</p><p>push</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/107055ed59c55b3800977745067d7464ae.png" alt="img"></p><p>pop</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10f968ebadc94fe487e21965b74efb546d.png" alt="img"></p><p>但如果我们需要51，甚至更多呢？</p><p>在这之前，我们先来讨论一下老朋友数组：</p><p>我们知道数组的特性就是连续储存，事先决定数组容量，那我们如果想在一个容量为三的数组中添加第四个数，我们该怎么做呢？</p><p>首先，我们不能直接在数组末尾加上要添加的数，因为我们不知道下一步是垃圾值还是已经被占用内存的空间（如下图所示）</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20130955.png" alt="屏幕截图 2024-10-13 130955"></p><p>那我们在一个有充足内存的空间存放我们的数组，生成一个新数组，再把老数组释放</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20131025.png" alt="屏幕截图 2024-10-13 131025"></p><p>但这样必然会造成空间的浪费以及时间的增加（复制数组会运用循环）</p><p>为了解决这个问题，我们将引入链表：</p><p><strong>Linked-List(链表)</strong></p><p>我们将内存看成画布，你可以将所要存放的数据放在任何一个可存放的位置，为了链接它们，你可以使用箭头。</p><p>大致形式是这样的：那么我们如何实现呢？我们又要用到我们的老朋友了—–’指针‘</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20140025.png" alt="屏幕截图 2024-10-13 140025"></p><p>我们可以将这些指针更一般地称为元数据(metadata),它是实际的数据，因为它帮助我解决问题，从一个地方到另一个地方。但元数据与数据不同，因为我本质上不关注元数据，那是一个实现细节，但它确实帮助组织我的实际数据。换句话说，我们只关心它有什么作用，不关心它存放什么（不关心它存放的地址）。</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20140923.png" alt="屏幕截图 2024-10-13 140923"></p><p>链表的大致结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; node;</span><br></pre></td></tr></table></figure><p>创建一个链表，首先要设置一个好的初始值(设置为空，避免垃圾值)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node* <span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>接下来，我们要为一个节点分配空间,这有点像Java中的引用类型（C语言中叫指针类型，名字不重要），n只是存放那个真正存放数据的空间的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node *n = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20141959.png" alt="屏幕截图 2024-10-13 141959"></p><p>如何向上图为这个节点存放number呢？我们试着给number传递数值（1）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*n).number = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>但日常我们不这么写，我们将*与.合并，得到下述代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n-&gt;number = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>本质上，n还是一个指针。并且图示的箭头被形象地简化成代码中的“-&gt;”,so beautiful </p><p>我们还得记得给指向下一个的指针指向NULL,避免它指向垃圾值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n-&gt;next = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>现在list可以指向我们创建的空间了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = node;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20143329.png" alt="屏幕截图 2024-10-13 143329"></p><p>接着，我们重复上述的操作，但有一点需要注意，我们不能再让list直接指向n了，因为这样会舍弃之前的空间</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20144332.png" alt="屏幕截图 2024-10-13 144332"></p><p>我们应该实现下列图示的操作：</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20144002.png" alt="屏幕截图 2024-10-13 144002"></p><p>具体代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n-&gt;next = <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">list</span> = n;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">next</span>;</span></span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span><br><span class="line">&#123;</span><br><span class="line">    node *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">int</span> number = atoi(argv[i]);     <span class="comment">// atoi将字符串（数组）转换为数字</span></span><br><span class="line">        <span class="comment">// printf(&quot;%i\n&quot;, argv[i]);</span></span><br><span class="line">        </span><br><span class="line">        node *n = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// free memory thus for</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n-&gt;number = number;</span><br><span class="line">        n-&gt;next = <span class="built_in">list</span>;</span><br><span class="line">        <span class="built_in">list</span> = n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Print while list</span></span><br><span class="line">    node *ptr = <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">while</span> (ptr != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%i &quot;</span>, ptr-&gt;number);</span><br><span class="line">        ptr = ptr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ptr作用过程图示如下：</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20150347.png" alt="屏幕截图 2024-10-13 150347"></p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20150408.png" alt="屏幕截图 2024-10-13 150408"></p><p>然而，我们想要搜索一个指定数值时，由于这些内存块并不是一个挨着一个，所以我们不能使用二分搜索。</p><p>以上代码是在前面添加，那我们再写一个在后面添加：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">next</span>;</span></span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span><br><span class="line">&#123;</span><br><span class="line">    node *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">int</span> number = atoi(argv[i]);     <span class="comment">// atoi将字符串（数组）转换为数字</span></span><br><span class="line">        <span class="comment">// printf(&quot;%i\n&quot;, argv[i]);</span></span><br><span class="line">        </span><br><span class="line">        node *n = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (n == <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// free memory thus for</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n-&gt;number = number;</span><br><span class="line">        n-&gt;next = null;</span><br><span class="line">        <span class="comment">// If list is empty</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">list</span> = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Iterate over numbers already</span></span><br><span class="line">           <span class="keyword">for</span> (node *ptr = <span class="built_in">list</span>; ptr != <span class="literal">NULL</span>; ptr = ptr-&gt;next) </span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">// if at the end of list</span></span><br><span class="line">               <span class="keyword">if</span> (ptr-&gt;next == <span class="literal">NULL</span>) </span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="comment">// Append node</span></span><br><span class="line">                   ptr-&gt;next = n;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Print while list</span></span><br><span class="line">    node *ptr = <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">while</span> (ptr != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%i &quot;</span>, ptr-&gt;number);</span><br><span class="line">        ptr = ptr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两者的运行时间区别：前者是O(1), 后者是O(n);</p><p>最终版本如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">next</span>;</span></span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span><br><span class="line">&#123;</span><br><span class="line">    node *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">int</span> number = atoi(argv[i]);     <span class="comment">// atoi将字符串（数组）转换为数字</span></span><br><span class="line">        <span class="comment">// printf(&quot;%i\n&quot;, argv[i]);</span></span><br><span class="line">        </span><br><span class="line">        node *n = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (n == <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// free memory thus for</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n-&gt;number = number;</span><br><span class="line">        n-&gt;next = null;</span><br><span class="line">        <span class="comment">// If list is empty</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">list</span> = n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If number belongs at beginning of list</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n-&gt;number &lt; <span class="built_in">list</span>-&gt;number) </span><br><span class="line">        &#123;</span><br><span class="line">        n-&gt;next = <span class="built_in">list</span>;</span><br><span class="line">            <span class="built_in">list</span> = n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// if number belong later in last</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Iterate over numbers already</span></span><br><span class="line">           <span class="keyword">for</span> (node *ptr = <span class="built_in">list</span>; ptr != <span class="literal">NULL</span>; ptr = ptr-&gt;next) </span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">// if at the end of list</span></span><br><span class="line">               <span class="keyword">if</span> (ptr-&gt;next == <span class="literal">NULL</span>) </span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="comment">// Append node</span></span><br><span class="line">                   ptr-&gt;next = n;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">               <span class="keyword">if</span> (n-&gt;number &lt; ptr-&gt;next-&gt;number) </span><br><span class="line">               &#123;</span><br><span class="line">                   n-&gt;next = ptr-&gt;next;</span><br><span class="line">                   ptr-&gt;next = n;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Print while list</span></span><br><span class="line">    node *ptr = <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">while</span> (ptr != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%i &quot;</span>, ptr-&gt;number);</span><br><span class="line">        ptr = ptr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但即使是这样，仍然有时间上的缺点O(N),有没有一种方法可以两全其美呢？</p><p><strong>Tree(树)</strong></p><p>binary search trees(二叉搜索树）</p><p>每一个节点都由一个数据和两个指针组成</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20161333.png" alt="屏幕截图 2024-10-13 161333"></p><p>节点代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125; node;</span><br></pre></td></tr></table></figure><p>搜索某个指定的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">bool search(node *tree, int number) </span><br><span class="line">&#123;</span><br><span class="line">if (tree == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else if (number &lt; tree-&gt;number)</span><br><span class="line">&#123;</span><br><span class="line">return search(tree-&gt;left, number);</span><br><span class="line">&#125;</span><br><span class="line">else if (number &gt; tree-&gt;number)</span><br><span class="line">&#123;</span><br><span class="line">return search(tree-&gt;right, number);</span><br><span class="line">&#125;</span><br><span class="line">else if (number == tree-&gt;number)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果tree没有上面那么beautiful呢</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20162924.png" alt="屏幕截图 2024-10-13 162924"></p><p>这将在《数据结构的旅程》中讨论…</p><p>接下来，我们将讨论数组与链表的组合</p><p><strong>字典</strong>（dictionaries）</p><p>类比英译汉字典，其中的单词与中文意思在这里更通常被称为键和值</p><p>日常手机自带的电话联系人就运用了这种抽象数据结构</p><p><strong>散列</strong>（hashing&#x2F;哈希）</p><p>在数学或代码中，它实际上可以接受任意数量的输入并将它们映射到有限数量的输出</p><p>类比定义域与值域，假如有一个无限的定义域，但散列函数将它们缩减到一个有限的值域，具有特定的值。</p><p>hash table</p><p>是一种混合体，是数组和链表的结合，我们借用联系人来体会一下：</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20165345.png" alt="屏幕截图 2024-10-13 165345"></p><p>hash table的时间复杂度为O(n)</p><p>节点代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">char</span> *number;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line">node *table[<span class="number">26</span>];</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *word)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">toupper</span>(word[<span class="number">0</span>]) - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当数组中每一项都十分均匀时，时间复杂度为O(n&#x2F;k)(k是数组长度)</p><p><strong>Tries(前缀树)</strong></p><p>trie –&gt; retrieval(检索)的简称</p><p>它是数组与树的混合，搜索的时间复杂度继承了数组的优点，O(1)</p><p><img src="https://cdn.jsdelivr.net/gh/WaterOfWinter/markdown_pic@main/2024/10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-13%20171746.png" alt="屏幕截图 2024-10-13 171746"></p><p>节点代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">children</span>[26];</span></span><br><span class="line">    <span class="type">char</span> *number;</span><br><span class="line">&#125; node;</span><br></pre></td></tr></table></figure><p>如果想要利用这个来查找人名，所消耗的速度仅与姓名长度有关</p><p>但也有个很大的缺点，如图所示，可能会有许多空指针，这十分浪费内存，牺牲空间换取时间，让我们体会空间与时间的平衡艺术。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CS50 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
